#!/usr/bin/env python

import collections
import sys
import re

def catch(func):
    try:
        return func()
    except Exception, e:
        print >> sys.stderr, str(e)
    return None

class Splitter(collections.defaultdict):
    """ Awk-like variables names:
    _1, _2, ... for parts of the line split by field separator FS
    _0 for the whole line
    NF for the number of fields and _NF for the last field
    NR for the number of records (implemented in main)
    _ for the list of [line, _1, _2, ...] (so _[1] == _1, etc, useful for slicing)
    for example: p(_1, *_[4:7])
    """
    parts = None
    def __init__(self, *args, **kwargs):
        collections.defaultdict.__init__(self, None, *args, **kwargs)
    def __missing__(self, key):
        if self.parts is None:
            self.parts = self['line'].split(self['FS'])
        if key == '_':
            return [self['line']] + self.parts
        if key.startswith('_'):
            try:
                n = int(key[1:])
                if n > 0:
                    if n <= len(self.parts):
                        return self.parts[n - 1]
                    else:
                        return ''
                elif n == 0:
                    return self.parts
            except ValueError, e:
                if key == '_NF':
                    return self.parts[-1]
        if key == 'NF':
            return len(self.parts)
        raise KeyError(key)

def main():
    pre, body, post = '', '', ''
    if len(sys.argv) == 2:
        body = sys.argv[1]
    elif len(sys.argv) == 4:
        pre, body, post = sys.argv[1], sys.argv[2], sys.argv[3]
    else:
        print >> sys.stderr, 'usage:'
        print >> sys.stderr, '    %s PRE BODY POST' % (sys.argv[0],)
        print >> sys.stderr, '    %s BODY' % (sys.argv[0],)
        sys.exit(1)

    # Utility print function
    def p(*args):
        print ' '.join(args)

    FS = None  # Field separator, like in awk
    NR = 0     # Number of Records
    line = None
    splitter = Splitter(locals())

    exec(pre, globals(), splitter)

    body_code = compile(body, '<pywk>', 'exec')

    for line in sys.stdin:
        splitter['line'] = line.rstrip('\n')
        try:
            exec(body_code, globals(), splitter)
        except Exception, e:
            print >> sys.stderr, str(e)
        splitter.parts = None
        splitter['NR'] += 1
    exec(post, globals(), splitter)

if __name__ == '__main__':
    main()
